#!/usr/bin/env python3
"""
Convert COCO JSON annotations to YOLO format
Usage: python scripts/convert_coco.py data/coco/annotations data/coco_yolo
"""

import sys
import os
from pathlib import Path

try:
    from ultralytics.data.converter import convert_coco
except ImportError:
    print("Error: ultralytics not installed. Run: pip install ultralytics")
    sys.exit(1)

def main():
    if len(sys.argv) != 3:
        print("Usage: python scripts/convert_coco.py <labels_dir> <save_dir>")
        print("Example: python scripts/convert_coco.py data/coco/annotations data/coco_yolo")
        sys.exit(1)
    
    labels_dir = sys.argv[1]  # e.g., data/coco/annotations
    save_dir = sys.argv[2]    # e.g., data/coco_yolo
    
    # Check if labels_dir exists
    if not os.path.exists(labels_dir):
        print(f"Error: Labels directory '{labels_dir}' does not exist.")
        print("Make sure you've downloaded the COCO annotations first using download_full_coco.ps1")
        sys.exit(1)
    
    # Check for required JSON files
    train_json = os.path.join(labels_dir, "instances_train2017.json")
    val_json = os.path.join(labels_dir, "instances_val2017.json")
    
    if not os.path.exists(train_json):
        print(f"Error: {train_json} not found.")
        sys.exit(1)
    
    if not os.path.exists(val_json):
        print(f"Error: {val_json} not found.")
        sys.exit(1)
    
    print(f"Converting COCO JSON annotations from '{labels_dir}' to YOLO format...")
    print(f"Output directory: '{save_dir}'")
    
    try:
        convert_coco(
            labels_dir=labels_dir, 
            save_dir=save_dir, 
            use_segments=False
        )
        print(f"✅ Successfully converted COCO to YOLO format in '{save_dir}'")
        
        # Create data.yaml file
        create_data_yaml(save_dir)
        
    except Exception as e:
        print(f"❌ Error during conversion: {e}")
        sys.exit(1)

def create_data_yaml(save_dir):
    """Create data.yaml file for YOLO training"""
    
    # COCO class names (80 classes)
    coco_names = [
        'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat',
        'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat',
        'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack',
        'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball',
        'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket',
        'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple',
        'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair',
        'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse',
        'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator',
        'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush'
    ]
    
    yaml_content = f"""# COCO dataset configuration for YOLO training
# Generated by OmniDetector convert_coco.py

path: {save_dir}  # dataset root dir
train: images/train2017  # train images (relative to 'path')
val: images/val2017      # val images (relative to 'path')

# Classes
nc: 80  # number of classes
names:
"""
    
    # Add class names
    for i, name in enumerate(coco_names):
        yaml_content += f"  {i}: {name}\n"
    
    yaml_path = os.path.join(save_dir, "data.yaml")
    with open(yaml_path, 'w') as f:
        f.write(yaml_content)
    
    print(f"✅ Created {yaml_path}")

if __name__ == "__main__":
    main()
